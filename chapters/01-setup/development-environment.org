#+TITLE: Development environment
#+SETUPFILE: ../setupfile.org

* Installation

In Emacs press =C-c C-c= to evaluate each code block in this section.

** Emacs packages

#+BEGIN_SRC elisp :results silent
  (dolist (package '(clojure-mode cider lispy lispyville))
    (unless (package-installed-p package)
      (message "~ Installing %s." package)
      (package-install package)))
#+END_SRC

* Configuration
  :PROPERTIES:
  :env-root: ~/rpm/.env/
  :END:

In Emacs press =C-c C-v t= to tangle all the code blocks in this file.

** Emacs per-project configuration
  :PROPERTIES:
  :header-args: :tangle (concat (org-entry-get nil "env-root" t) "emacs.el")
  :END:

We want to keep environment-specific configuration out of our =~/.emacs=.

https://orgmode.org/worg/org-contrib/babel/languages/index.html CLJS not supported directly

The publish file is defined in [[./publishing.org][publishing.org]]. I don't like this dependency though. Maybe it'd be best to autoload any file in .env/elisp/autoload, that way we don't have this coupling.

https://www.emacswiki.org/emacs/GenericMode

;file-name-sans-extension

https://www.emacswiki.org/emacs/LoadingLispFiles

#+BEGIN_SRC emacs-lisp
  (setq project-root-path (file-name-directory (buffer-file-name)))
  (defun project-root-path (path) (concat project-root-path path))
  (setq setupfile-path (concat project-root-path "setupfile.org"))

  (setq backend-root-path (file-name-directory (buffer-file-name)))
  (defun backend-root-path (path) (concat project-root-path "backend/" path))

  (setq frontend-root-path (file-name-directory (buffer-file-name)))
  (defun frontend-root-path (path) (concat project-root-path "frontend/" path))

  (setq elisp-autoload-dir (concat (file-name-directory (buffer-file-name)) "elisp/autoload"))
  (require 'load-directory)
  (load-directory elisp-autoload-dir)

  (add-to-list 'load-path (expand-file-name "~/.zsh/environments/elisp"))

  (require 'generic-x)

  (define-generic-mode
    'gitignore-mode
    '("#") '() '() '("^\\.gitignore$") nil
    "A mode for .gitignore files")

  (define-generic-mode
    'editorconfig-mode
    '("#")
    '("root" "end_of_line" "insert_final_newline" "charset" "indent_style" "indent_size" "trim_trailing_whitespace")
    '() '("^\\.editorconfig$") nil
    "A mode for .editorconfig files")


  (org-babel-do-load-languages 'org-babel-load-languages '(
    (shell . t)))
  (load "literate-programming")

  (defun mkprologue (buffer-name)
    (my/literate/mkprologue "https://jakub-stastny.github.io/rental-property-management/" buffer-name))

  (add-to-list 'org-src-lang-modes '("clojurescript" . "clojurescript"))
  (add-to-list 'org-src-lang-modes '("edn" . "clojure"))
  (add-to-list 'org-src-lang-modes '("babashka" . "clojure"))
  (add-to-list 'org-src-lang-modes '("json" . "javascript"))

  (load "publish")
  ;(load-theme 'tsdh-light)
#+END_SRC

*** Links

- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/elisp/literate-programming.el][~/zsh/environments/elisp/literate-programming.el]]

** ZSH per-project configuration
  :PROPERTIES:
  :header-args: :tangle (concat (org-entry-get nil "env-root" t) "zsh.zsh")
  :END:

#+BEGIN_SRC shell
  load ~/.zsh/environments/helpers.zsh && save-function-list
  load ~/.zsh/environments/basic.zsh
  load ~/.zsh/environments/emacs.zsh

  rename-first-tab

  # Custom functions & aliases.

  # We compile on save, but for the first-time compilation,
  # we want to be able to do it from the shell, rather than
  # having to go and save manually each file from Emacs.
  tangle() {
    for dir in *(/); do
      cd $dir
      echo "(dolist (file argv) (message file) (find-file file) (org-babel-tangle))" > compile.el
      emacs --script compile.el *.org
      rm compile.el
      cd -
    done
  }

  run() {
    clj -M -m rpm.main
  }

  t() {
    clj -X:test
  }

  report-custom-functions
#+END_SRC

*** Links

- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/helpers.zsh][~/zsh/environments/helpers.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/basic.zsh][~/zsh/environments/basic.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/emacs.zsh][~/zsh/environments/emacs.zsh]]
