#+TITLE: Development environment
#+SETUPFILE: ../setupfile.org

* Installation

In Emacs press =C-c C-c= to evaluate each code block in this section.

** Emacs packages

#+begin_src elisp :results silent
  (dolist (package '(clojure-mode cider lispy lispyville rainbow-delimiters))
    (unless (package-installed-p package)
      (message "~ Installing %s." package)
      (package-install package)))
#+end_src


* Configuration
  :PROPERTIES:
  :project-root: ~/rpm/
  :END:

In Emacs press =C-c C-v t= to tangle all the code blocks in this file.

** Emacs per-project configuration
  :PROPERTIES:
  :header-args: :tangle (concat (org-entry-get nil "project-root" t) ".env/emacs.el")
  :END:

We want to keep environment-specific configuration out of our =~/.emacs=.

*** TODO Hook lispy, lispyville and rainbow-delimiters to .clj, .cljs and .el

#+begin_src emacs-lisp
  ;; (add-hook 'lispy-mode-hook #'lispyville-mode)
  ;; (add-hook 'clojure-mode-hook #'lispy-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+end_src

*** Path helpers for Orgmode

#+begin_src emacs-lisp :noweb yes
  (setq project-root-path "<<project-root>>")
  (defun project-root-path (path) (concat project-root-path path))
  (setq setupfile-path (concat project-root-path "setupfile.org"))

  (setq backend-root-path (file-name-directory (buffer-file-name)))
  (defun backend-root-path (path) (concat project-root-path "backend/" path))

  (setq backend-src-path (concat backend-root-path "src/rpm"))
  (defun backend-src-path (path) (concat project-src-path path))

  (setq backend-test-path (concat backend-root-path "test/rpm"))
  (defun backend-test-path (path) (concat project-test-path path))

  (setq frontend-root-path (file-name-directory (buffer-file-name)))
  (defun frontend-root-path (path) (concat project-root-path "frontend/" path))
#+end_src

*** Major modes

#+begin_src emacs-lisp
  (require 'generic-x)

  (define-generic-mode
    'gitignore-mode
    '("#") '() '() '("^\\.gitignore$") nil
    "A mode for .gitignore files")

  ;; (define-generic-mode
  ;;   'editorconfig-mode
  ;;   '("#")
  ;;   '("root" "end_of_line" "insert_final_newline" "charset" "indent_style" "indent_size" "trim_trailing_whitespace")
  ;;   '() '("^\\.editorconfig$") nil
  ;;   "A mode for .editorconfig files")
#+end_src

*** Autoloaded files

https://www.emacswiki.org/emacs/LoadingLispFiles

This allows us to decouple for instance the [[./publishing.org::#publishing-script][publishing helper]] from the development setup file.

#+begin_src emacs-lisp
  (setq elisp-autoload-dir (concat (file-name-directory (buffer-file-name)) "elisp/autoload"))
  (require 'load-directory)
  (load-directory elisp-autoload-dir)
#+end_src

*** Rest

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.zsh/environments/elisp"))

  (defun mkprologue (buffer-name)
    (my/literate/mkprologue "https://jakub-stastny.github.io/rental-property-management/" buffer-name))

  ;(load-theme 'tsdh-light)
#+end_src

*** Orgmode source blocks

Https://orgmode.org/worg/org-contrib/babel/languages/index.html CLJS not supported directly

https://www.emacswiki.org/emacs/GenericMode

;file-name-sans-extension

#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '(
    (shell . t) (sqlite . t)))

  (add-to-list 'org-src-lang-modes '("clojurescript" . "clojurescript"))
  (add-to-list 'org-src-lang-modes '("edn" . "clojure"))
  (add-to-list 'org-src-lang-modes '("babashka" . "clojure"))
  (add-to-list 'org-src-lang-modes '("json" . "javascript"))
#+end_src

*** My setup

Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/elisp/literate-programming.el][~/zsh/environments/elisp/literate-programming.el]]

#+begin_src emacs-lisp
  (load "literate-programming")
#+end_src

** ZSH per-project configuration
  :PROPERTIES:
  :header-args: :tangle (concat (org-entry-get nil "project-root" t) ".env/zsh.zsh")
  :END:

*** Dependencies

- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/helpers.zsh][~/zsh/environments/helpers.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/basic.zsh][~/zsh/environments/basic.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/emacs.zsh][~/zsh/environments/emacs.zsh]]

#+begin_src shell
  load ~/.zsh/environments/helpers.zsh && save-function-list
  load ~/.zsh/environments/basic.zsh
  load ~/.zsh/environments/emacs.zsh
#+end_src

*** Tangling

We compile on save, but for the first-time compilation, we want to be able to do it from the shell, rather than having to go and save manually each file from Emacs.

https://orgmode.org/manual/Batch-Execution.html#Batch-Execution

#+name: tangle-files
#+begin_src emacs-lisp :shebang "#!/usr/bin/env emacs --script"
  (progn
    (require 'ob-tangle)
    (dolist (file command-line-args-left)
      (with-current-buffer (find-file-noselect file)
        (org-babel-tangle))))
#+end_src

#+begin_src shell :noweb yes
  read -d '' elisp-tangle <<-EOF
    <<tangle-files>>
  EOF

  tangle() {
    if [ $# -eq 0 ];
      # emacs -Q --batch --eval "<<tangle-files>>" chapters/**/*.org
      $PROJECT_ROOT/.env/tangle.el chapters/**/*.org
    else
      # emacs -Q --batch --eval "<<tangle-files>>" "$@"
      $PROJECT_ROOT/.env/tangle.el "$@"
    fi
  }
#+end_src

*** Run

#+begin_src shell
  run() {
    clj -M -m rpm.main
  }
#+end_src

*** Test

#+begin_src shell
  t() {
    clj -X:test
  }
#+end_src

*** Main

#+begin_src shell
  rename-first-tab
  report-custom-functions
#+end_src
