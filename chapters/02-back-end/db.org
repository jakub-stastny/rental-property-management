#+TITLE: Rental property management
#+AUTHOR: Jakub Šťastný

#+begin_src shell
  apt-get install -y sqlite3
#+end_src

https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html

#+begin_src sqlite :db test.db :results none
  DROP TABLE IF EXISTS users;
  CREATE TABLE users(email varchar(100), name varchar(100));
#+end_src

#+begin_src sqlite :db test.db :results none
  INSERT INTO users(email, name) VALUES("john.doe@gmail.com", "John Doe")
#+end_src

#+name: get-user-query
#+begin_src sqlite :db test.db :var email="john.doe@gmail.com" :noweb yes
  SELECT * FROM users WHERE (email = "$email")
#+end_src

#+RESULTS: get-user-query

# Ideas
- Replace "$email" by "?"
- We don't need $email, I think, email is fine(?)
- things-to-replace: {"email" email}, then in the macro map and if it matches "email", replace it with email.
  By default Org expands code blocks during tangling. The ‘no-expand’ header argument turns off such expansions. Note that one side-effect of expansion by org-babel-expand-src-block also assigns values (see Environment of a Code Block) to variables. Expansions also replace noweb references with their targets (see Noweb Reference Syntax). Some of these expansions may cause premature assignment, hence this option. This option makes a difference only for tangling. It has no effect when exporting since code blocks for execution have to be expanded anyway.
  org-babel-post-tangle-hook
This hook is run from within code files tangled by org-babel-tangle, making it suitable for post-processing, compilation, and evaluation of code in the tangled files.

Debuggers normally link errors and messages back to the source code. But for tangled files, we want to link back to the Org file, not to the tangled source file. To make this extra jump, Org uses org-babel-tangle-jump-to-org function with two additional source code block header arguments:

Set ‘padline’ to true—this is the default setting.
Set ‘comments’ to ‘link’, which makes Org insert links to the Org file.


#+begin_src clojure :tangle TEST.CLJ :noweb yes
  ;; Why is this a macro?
  ;; so we can expand "$email" to var email.
  (defmacro sql
    ""
    [chunks]
    (let [variables-replace (map (fn [chunk]
            (if (= chunk "\"$email\"")
              "email"
              (str "\"" chunk "\"")) chunks))]
      (push "str" (pop variables-replaced))) ; pop: remove last ;
  `(str ~@forms) ; do the map here
  ; (sql SELECT * FROM users where (email = "$email"))
  ; ->
  ; (str "SELECT" "*" "FROM" "users" "WHERE "email" "=" email)
    ;; (clojure.string/replace string #"\"\$(\w+)\"" "$1"))

  (defroute get-user
    "..."
    [email]
    (jdbc/run (sql <<get-user-query>>)))
    ;; (jdbc/run <<make-query(query=<<get-user-query>>)>>))
    (jdbc/run (clojure.string/replace "<<get-user-query>>" ; No this won't work if the SQL has " in it.
                                    ; maybe a macro (make-string <<get-user-query>>)?
#+end_src

This way we can use =get-user-query= as a standalone fn, execute from Orgmode when convenient, but at the same time we can use it in the route itself by not expanding the email and leaving it to be just =email=, which matches the variable that we get from the request.

* Imports

#+BEGIN_SRC clojure :tangle ../test/rpm/main_test.clj :mkdirp yes
  (ns rpm.main-test
    (:require [clojure.spec.alpha :as s]
              [clojure.test :refer [deftest is]]
              [expectations.clojure.test
              :refer [defexpect expect expecting
                      approximately between between' functionally
                      side-effects]]))
#+END_SRC

* Tests

Just an example for now.

#+BEGIN_SRC clojure :tangle ../test/rpm/main_test.clj :mkdirp yes
  (defexpect equality
    (expect 1 (* 1 1))
    (expect "foo" (str "f" "oo")))
#+END_SRC
