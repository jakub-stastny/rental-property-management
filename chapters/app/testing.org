#+TITLE: Tests
#+SETUPFILE: ../setupfile.org

* End-to-end tests

#+BEGIN_SRC clojure :tangle e2e/core.cljs :mkdirp yes
  (ns e2e.core
    "This namespace contains your e2e tests and is the entrypoint for 'yarn e2e'."
    (:require [cljs.test :refer-macros [deftest is async use-fixtures]]
              ["http" :as http]
              ["serve-handler" :as serve-handler]
              ["taiko" :refer [openBrowser goto closeBrowser text diagnostics]]))

  ; Serve public/ on a static server.
  (use-fixtures
    :once
    (let [server (.createServer http #(serve-handler %1 %2 #js {:public "public/"}))]
      {:before #(.listen server 5000)
      :after #(.close server)}))

  ; Change debug to true to see the browser performing actions.
  (def debug false)
  (def browser-opts (if debug
                      #js {:headless false :observe true}
                      #js {}))

  (deftest app-works
    (let [test-string "is running!"]
      (async done
            (->
              (openBrowser browser-opts)
              (.then #(.logConsoleInfo diagnostics))
              (.then #(.on %1 "logEntry" (fn [log] (is (not (= (.-level log) "error"))
                                                        (str "Should not log errors: "
                                                            (js/JSON.stringify log))))))
              (.then #(goto "http://localhost:5000"))
              (.then #(.exists (text test-string)))
              (.then #(is % (str "Text '" test-string "' should exist in page")))
              (.catch #(is false "Should not have thrown errors"))
              (.finally #(closeBrowser))
              (.then #(done))))))
#+END_SRC

* GitHub workflows

#+BEGIN_SRC yaml :tangle .github/workflows/test.yml :mkdirp yes
  # DO NOT EDIT DIRECTLY!
  # THIS FILE IS AUTOGENERATED FROM chapters/testing.org

  name: Clojurescript tests

  # Controls when the action will run.
  on:
    push:
      branches: [ master ]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  jobs:
    # This workflow contains a single job called "build"
    build:
      runs-on: ubuntu-latest

      steps:
        - name: No-op
          run: echo OK
        # # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        # - uses: actions/checkout@v2

        # - name: Run in $GITHUB_WORKSPACE
        #   run: cd $GITHUB_WORKSPACE

        # - name: Prepare java
        #   uses: actions/setup-java@v1
        #   with:
        #     java-version: 1.8

        # - name: Install Clojure CLI
        #   uses: DeLaGuardo/setup-clojure@3.4
        #   with:
        #     cli: 1.10.1.693

        # - name: Install Emacs
        #   run: sudo apt-get install -y emacs-nox

        # # TODO: Use something better suited for this than Emacs.
        # - name: Tangle source files
        #   run: |
        #     cd src
        #     echo "(dolist (file argv) (message file) (find-file file) (org-babel-tangle))" > compile.el
        #     emacs --script compile.el *.org
        #     cd -

        # - name: Run Clojure tests
        #   run: clojure -X:test
#+END_SRC
